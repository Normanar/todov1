{"version":3,"sources":["api/todolists-api.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","Task","onClickHandler","useCallback","removeTask","task","id","todolistId","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","style","paddingTop","Button","initialState","SetTodosThunk","dispatch","getState","then","res","type","todos","data","App","useEffect","todolists","useSelector","state","useDispatch","action","taskId","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","item","Paper","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","copyState","forEach","stateCopy","newTasks","newTask","todoListId","description","startDate","deadline","addedDate","order","priority","Low","todolistTasks","newTasksArray","todolist","find","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b43c2d4b.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'eaf34c04-f789-4b8a-b729-c59d43de7ca7'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from './EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses, TaskType } from './api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\nimport {FilterValuesType} from './state/todolists-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import { v1 } from 'uuid';\r\nimport {todolistsAPI, TodolistType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n    | SetTodolistsType\r\n\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n\r\n        case \"SET-TODOLISTS\": {\r\n            return action.todos.map( tl => {\r\n                return {...tl, filter: \"all\"}\r\n            })\r\n        }\r\n\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n//----------------------------------\r\nexport const setTodolistsAC = (todos : TodolistType[]) => {\r\n    return {\r\n        type: 'SET-TODOLISTS',\r\n        todos\r\n    } as const\r\n}\r\n\r\nexport type SetTodolistsType = ReturnType<typeof setTodolistsAC>\r\n\r\nexport const SetTodosThunk = (dispatch: Dispatch, getState: () => AppRootStateType) : void => {\r\n    todolistsAPI.getTodolists()\r\n        .then( (res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n}\r\n\r\n\r\n","import { TasksStateType } from '../App';\r\nimport { v1 } from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsType} from './todolists-reducer';\r\nimport { TaskPriorities, TaskStatuses, TaskType } from '../api/todolists-api'\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsType\r\n\r\nconst initialState: TasksStateType = {\r\n    /*\"todolistId1\": [\r\n        { id: \"1\", title: \"CSS\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"JS\", status: TaskStatuses.Completed, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"React\", status: TaskStatuses.New, todoListId: \"todolistId1\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ],\r\n    \"todolistId2\": [\r\n        { id: \"1\", title: \"bread\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"2\", title: \"milk\", status: TaskStatuses.Completed, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low },\r\n        { id: \"3\", title: \"tea\", status: TaskStatuses.New, todoListId: \"todolistId2\", description: '',\r\n            startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low }\r\n    ]*/\r\n\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SET-TODOLISTS\": {\r\n            let copyState = {...state}\r\n            action.todos.forEach( (tl) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                status: TaskStatuses.New,\r\n                todoListId: action.todolistId, description: '',\r\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', status, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { Menu } from '@mui/icons-material';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    FilterValuesType,\r\n    removeTodolistAC, setTodolistsAC, SetTodosThunk,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from './state/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport {TaskStatuses, TaskType, todolistsAPI} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    useEffect( () => {\r\n        // todolistsAPI.getTodolists()\r\n        //     .then( (res) => {\r\n        //         dispatch(setTodolistsAC(res.data))\r\n            dispatch(SetTodosThunk)\r\n    }, [])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}